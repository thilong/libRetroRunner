#include <jni.h>
#include "utils/jnistring.h"
#include "types/log.h"
#include "app/app_context.h"

#define LOGD_JNI(...) LOGD("[JNI] " __VA_ARGS__)
#define LOGW_JNI(...) LOGW("[JNI] " __VA_ARGS__)
#define LOGE_JNI(...) LOGE("[JNI] " __VA_ARGS__)
#define LOGI_JNI(...) LOGI("[JNI] " __VA_ARGS__)

#define DeclareEnvironment(_RET_FAIL) \
    AppContext *app = AppContext::Current(); \
    if (app == nullptr) return _RET_FAIL; \
    auto environment = app->GetEnvironment(); \
    if (env == nullptr) return _RET_FAIL

namespace libRetroRunner {
    extern "C" JavaVM *gVm = nullptr;


}
using namespace libRetroRunner;

extern "C" JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_initEnv(JNIEnv *env, jclass clazz) {
    env->GetJavaVM(&(gVm));
}

extern "C" JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_create(JNIEnv *env, jclass clazz, jstring rom_path, jstring core_path, jstring system_path, jstring save_path) {
    const std::shared_ptr<AppContext> &app = AppContext::CreateInstance();
    JString rom(env, rom_path);
    JString core(env, core_path);
    JString system(env, system_path);
    JString save(env, save_path);
    app->SetPaths(rom.stdString(), core.stdString(), system.stdString(), save.stdString());
    LOGD_JNI("new app context created.");
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_setVideoTarget(JNIEnv *env, jclass clazz, jobject surface) {
    auto appContext = AppContext::Current();
    if (appContext == nullptr) return;
    if (surface == nullptr) {
        appContext->SetVideoRenderTarget(nullptr, 0);
    } else {
        void *args[2] = {env, surface};
        appContext->SetVideoRenderTarget(args, 2);
    }
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_setVideoTargetSize(JNIEnv *env, jclass clazz, jint width, jint height) {
    auto appContext = AppContext::Current();
    if (appContext == nullptr) return;
    appContext->SetVideoRenderSize(width, height);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_addVariable(JNIEnv *env, jclass clazz, jstring key, jstring value) {
    auto appContext = AppContext::Current();
    if (appContext == nullptr) return;
    JString keyVal(env, key);
    JString valueVal(env, key);
    appContext->SetVariable(keyVal.stdString(), valueVal.stdString());
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_start(JNIEnv *env, jclass clazz) {
    AppContext *appContext = AppContext::Current();
    if (appContext != nullptr) appContext->Start();
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_pause(JNIEnv *env, jclass clazz) {
    AppContext *appContext = AppContext::Current();
    if (appContext != nullptr) appContext->Pause();
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_resume(JNIEnv *env, jclass clazz) {
    AppContext *appContext = AppContext::Current();
    if (appContext != nullptr) appContext->Resume();
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_stop(JNIEnv *env, jclass clazz) {
    AppContext *appContext = AppContext::Current();
    if (appContext != nullptr) appContext->Stop();
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_reset(JNIEnv *env, jclass clazz) {
    AppContext *appContext = AppContext::Current();
    if (appContext != nullptr) appContext->Reset();
}

extern "C"
JNIEXPORT jboolean JNICALL
Java_com_aidoo_retrorunner_NativeRunner_updateButtonState(JNIEnv *env, jclass clazz, jint player, jint key, jboolean down) {
    auto appContext = AppContext::Current();
    if (appContext == nullptr) {
        LOGE("[JNI] app context is null, can't set button state");
        return false;
    }
    auto input = appContext->GetInput();
    if (input == nullptr) {
        LOGE("[JNI] input context is null, can't set button state");
        return false;
    }
    return input->UpdateButton(player, key, down);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_updateAxisState(JNIEnv *env, jclass clazz, jint player, jint axis, jfloat value) {
    // TODO: implement UpdateAxisState()
}

extern "C"
JNIEXPORT jdouble JNICALL
Java_com_aidoo_retrorunner_NativeRunner_getAspectRatio(JNIEnv *env, jclass clazz) {
    DeclareEnvironment(0);
    return environment->GetAspectRatio();
}


extern "C"
JNIEXPORT jint JNICALL
Java_com_aidoo_retrorunner_NativeRunner_getGameWidth(JNIEnv *env, jclass clazz) {
    DeclareEnvironment(0);
    return environment->GetGameWidth();
}
extern "C"
JNIEXPORT jint JNICALL
Java_com_aidoo_retrorunner_NativeRunner_getGameHeight(JNIEnv *env, jclass clazz) {
    DeclareEnvironment(0);
    return environment->GetGameHeight();
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_takeScreenshot(JNIEnv *env, jclass clazz, jstring path) {
    AppContext *app = AppContext::Current();

    JString pathVal(env, path);
    std::string pathStr = pathVal.stdString();
    std::shared_ptr<ParamCommand<std::string>> command = std::make_shared<ParamCommand<std::string>>(AppCommands::kTakeScreenshot, pathStr);
    std::shared_ptr<Command> baseCommand = command;
    LOGW_JNI("take screenshot command [%ld] added, path: %s", command->id, command->GetArg().c_str());
    app->AddThreadCommand(baseCommand);
}







extern "C"
JNIEXPORT jint JNICALL
Java_com_aidoo_retrorunner_NativeRunner_saveRam(JNIEnv *env, jclass clazz) {
    AppContext *app = AppContext::Current();
    std::shared_ptr<ThreadCommand<int>> command = std::make_shared<ThreadCommand<int>>(AppCommands::kSaveSRAM);
    std::shared_ptr<Command> baseCommand = command;
    app->AddThreadCommand(baseCommand);
    command->Wait();
    LOGD_JNI("save ram command [%ld] returned: %d", command->id, command->GetResult());
    return command->GetResult();
}
extern "C"
JNIEXPORT jint JNICALL
Java_com_aidoo_retrorunner_NativeRunner_loadRam(JNIEnv *env, jclass clazz) {
    AppContext *app = AppContext::Current();
    std::shared_ptr<ThreadCommand<int>> command = std::make_shared<ThreadCommand<int>>(AppCommands::kLoadSRAM);
    std::shared_ptr<Command> baseCommand = command;
    app->AddThreadCommand(baseCommand);
    command->Wait();
    LOGD_JNI("load ram command [%ld] returned: %d", command->id, command->GetResult());
    return command->GetResult();
}
extern "C"
JNIEXPORT jint JNICALL
Java_com_aidoo_retrorunner_NativeRunner_saveState(JNIEnv *env, jclass clazz, jint idx) {
    AppContext *app = AppContext::Current();
    std::shared_ptr<ThreadParamCommand<int, int>> command = std::make_shared<ThreadParamCommand<int, int>>(AppCommands::kSaveState, idx);
    std::shared_ptr<Command> baseCommand = command;
    app->AddThreadCommand(baseCommand);
    command->Wait();
    LOGD_JNI("save state command [%ld] returned: %d", command->id, command->GetResult());
    return command->GetResult();
}
extern "C"
JNIEXPORT jint JNICALL
Java_com_aidoo_retrorunner_NativeRunner_loadState(JNIEnv *env, jclass clazz, jint idx) {
    AppContext *app = AppContext::Current();
    std::shared_ptr<ThreadParamCommand<int, int>> command = std::make_shared<ThreadParamCommand<int, int>>(AppCommands::kLoadState, idx);
    std::shared_ptr<Command> baseCommand = command;
    app->AddThreadCommand(baseCommand);
    command->Wait();
    LOGD_JNI("load state command [%ld] returned: %d", command->id, command->GetResult());
    return command->GetResult();
}

extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_setFastForward(JNIEnv *env, jclass clazz, jdouble multiplier) {
    DeclareEnvironment();
    if (multiplier < 0.1 || multiplier > 3.0) multiplier = 1;
    environment->SetFastForwardSpeed(multiplier);
}

extern "C"
JNIEXPORT jlong JNICALL
Java_com_aidoo_retrorunner_NativeRunner_addCheat(JNIEnv *env, jclass clazz, jstring code, jstring desc, jboolean enable) {
    JString jCode(env, code);
    JString jDesc(env, desc);
    AppContext *app = AppContext::Current();
    if (app == nullptr) return 0;
    auto cheatManager = app->GetCheatManager();
    if (cheatManager == nullptr) return 0;
    return cheatManager->AddCheat(jCode.stdString(), jDesc.stdString(), enable);
}
extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_removeCheat(JNIEnv *env, jclass clazz, jlong id) {

}
extern "C"
JNIEXPORT void JNICALL
Java_com_aidoo_retrorunner_NativeRunner_clearCheat(JNIEnv *env, jclass clazz) {

}